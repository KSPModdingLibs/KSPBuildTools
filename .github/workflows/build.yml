name: build

on:
  workflow_call:
    inputs:
      build-configuration:
        type: string
        default: Release
      artifacts:
        type: string
        default: GameData LICENSE* README* CHANGELOG*
      ksp-zip-url:
        type: string
        default: https://github.com/KSPModdingLibs/KSPLibs/raw/main/KSP-1.12.5.zip
      dependency-identifiers:
        type: string
      solution-file-path:
        type: string
      use-msbuild:
        type: boolean
        default: true
        description: >
          If MSBuild should be used. If your mod has no msbuild project (e.g. a pure part mod) 
          you should set this to false
      use-ckan:
        type: boolean
        default: false
        description: >
          If CKAN should be installed to install dependencies in the msbuild project.
    secrets:
      ksp-zip-password:
        required: false

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Mod Repo
        uses: actions/checkout@v4
        with:
          submodules: true

      # Install CKAN and set up an instance
      - uses: KSPModdingLibs/KSPBuildTools/.github/actions/setup-ckan@main
        if: ${{ (inputs.use-ckan && inputs.use-msbuild) || inputs.dependency-identifiers }}

      # Install any listed CKAN dependencies
      - uses: KSPModdingLibs/KSPBuildTools/.github/actions/install-dependencies@main
        if: ${{ inputs.dependency-identifiers }}
        with:
          dependency-identifiers: ${{ inputs.dependency-identifiers }}

      # Compile the mod
      - uses: KSPModdingLibs/KSPBuildTools/.github/actions/compile@main
        if: ${{ inputs.use-msbuild }}
        with:
          build-configuration: ${{ inputs.build-configuration }}
          ksp-zip-url: ${{ inputs.ksp-zip-url }}
          ksp-zip-password: ${{ secrets.ksp-zip-password }}

      # Assemble the mod into a release package and upload it as an artifact
      - uses: KSPModdingLibs/KSPBuildTools/.github/actions/assemble-release@main
        with:
          artifacts: ${{ inputs.artifacts }}
          output-file-name: ${{ github.event.repository.name }}-${{ inputs.build-configuration }}
