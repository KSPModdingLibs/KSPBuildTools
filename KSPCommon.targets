<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Condition=" '$(KSPCommonPropsImported)' == '' " Project="KSPCommon.props"/>

  <!-- Pre/post build targets -->
  <Target Name="BeforeBuildScript" BeforeTargets="Build">
  </Target>
  <Target Name="PostBuildScript" AfterTargets="Build">
    <CallTarget Targets="CopyBinariesToRepo"/>
  </Target>

  <!--Custom Targets-->

  <!-- this probably isn't the best way to do this, because it doesn't necessarily get run when switching build configs (debug/release)-->
  <!-- make sure to always do a rebuild when switching configs and you should be fine -->
  <Target Name="CopyBinariesToRepo">
    <ItemGroup>
      <BinariesToCopy Include="$(TargetDir)\*.*"/>
    </ItemGroup>
    <Copy SourceFiles="@(BinariesToCopy)" DestinationFolder="$(RepoRootPath)\$(BinariesOutputRelativePath)"/>
  </Target>

  <!-- Use CKAN to install mods for any references tagged with a CKAN Identifier -->
  <Target Name="CKANInstall" BeforeTargets="_GenerateRestoreProjectSpec;Restore" Inputs="@(Reference)" Outputs="$(KSPRoot)/CKAN/registry.json">
    <ItemGroup>
      <_CKANCompatibleVersionItems Include="$(CKANCompatibleVersions.Split(' '))"/>
      <_CKANDependency Include="%(Reference.CKANIdentifier)" Condition="%(Reference.CKANVersion) == ''"/>
      <_CKANDependency Include="%(Reference.CKANIdentifier)=%(Reference.CKANVersion)" Condition="%(Reference.CKANVersion) != ''"/>
      <_CKANDependency Include="@(CKANDependency)"/>
    </ItemGroup>

    <PropertyGroup>
      <_TempStagingFolder>$([System.IO.Path]::Combine($([System.IO.Path]::GetTempPath()), $([System.IO.Path]::GetRandomFileName())))</_TempStagingFolder>
      <_CKANCommandFile>$(_TempStagingFolder)/ckan_commands.txt</_CKANCommandFile>
      <_CKANDependencyList>@(_CKANDependency, ' ')</_CKANDependencyList>
    </PropertyGroup>

    <ItemGroup>
      <!-- Not using `ckan compat set` because as of 2024-08-16 it is still only available in the dev branch -->
      <_CKANCommands Include="compat add --gamedir &quot;$(KSPROOT)&quot; %(_CKANCompatibleVersionItems.Identity)"
                     Condition=" '$(CKANCompatibleVersions)' != '' "/>

      <_CKANCommands Include="install --no-recommends --gamedir &quot;$(KSPROOT)&quot; $(_CKANDependencyList)"/>
    </ItemGroup>

    <Message Text="Writing CKAN commands to $(_CKANCommandFile)"/>
    <Message Text="@(_CKANCommands, '%0a')" Importance="Low"/>
    <WriteLinesToFile File="$(_CKANCommandFile)" Lines="@(_CKANCommands)"/>
    <Exec Command="cat '$(_CKANCommandFile)' | ckan prompt --headless"
          Condition="'$(_CKANDependencyList)' != ''"/>
    <RemoveDir Directories="$(_TempStagingFolder)"/>
  </Target>

  <!--  For use like so: `msbuild -t:"GetRequiredExternalTools" -verbosity:minimal -nologo`, then pipe into your destination of choice -->
  <Target Name="GetRequiredExternalTools">
    <ItemGroup>
      <CKANDependencyList Include="%(Reference.CKANIdentifier)"/>
      <RequiredExternalTool Include="CKAN" Condition="@(CKANDependencyList) != ''"/>
    </ItemGroup>
    <Message Text="@(RequiredExternalTool)" Importance="high"/>
  </Target>

  <!--
  Gets version info from Git, or falls back to 0.0.0 if this fails.
  This will not work if you have any hyphens in your tag names. blame Git

  Populates the following properties:
    GitTag: The most recent tag in the repo
    GitHeight: The number of commits since that tag
    GitCommit: The most recent git commit hash in the repo
    Version: (MSBuild wellknown property) The calculated version.
      Equal to GitTag but with the patch number incremented if GitHeight is not 0
    Build: The build number. Equal to GitHeight
  -->
  <Target Name="GetVersionFromGit" BeforeTargets="PrepareForBuild" Condition="$(GetVersionFromGit) == 'true'">
    <PropertyGroup>
      <!-- Fallback values -->
      <Version>0.0.0</Version>
      <Build>0</Build>
    </PropertyGroup>
    <Exec Command="git describe --tags --long" ConsoleToMSBuild="true"
          IgnoreStandardErrorWarningFormat="true" IgnoreExitCode="true"
          EchoOff="true" WorkingDirectory="$(RepoRootPath)">
      <Output TaskParameter="ConsoleOutput" PropertyName="_GitDescribe"/>
      <Output TaskParameter="ExitCode" PropertyName="_GitDescribeExit"/>
    </Exec>
    <PropertyGroup Condition="$(_GitDescribeExit) == 0">
      <GitTag>$(_GitDescribe.Split('-')[0])</GitTag>
      <GitHeight>$(_GitDescribe.Split('-')[1])</GitHeight>
      <GitCommit>$(_GitDescribe.Split('-')[2])</GitCommit>
      <_VersionMajor>$(GitTag.Split('.')[0])</_VersionMajor>
      <_VersionMinor>$(GitTag.Split('.')[1])</_VersionMinor>
      <_VersionPatch>$(GitTag.Split('.')[2])</_VersionPatch>
      <_VersionPatch Condition="$(GitHeight) != '0'">$([MSBuild]::Add($(_VersionPatch), 1))</_VersionPatch>
      <Version>$(_VersionMajor).$(_VersionMinor).$(_VersionPatch)</Version>
      <Build>$(GitHeight)</Build>
    </PropertyGroup>
    <PropertyGroup>
      <AssemblyVersion>$(Version).$(Build)</AssemblyVersion>
    </PropertyGroup>
    <Message Text="Calculated version from git is $(Version)" Condition="$(_GitDescribeExit) == 0"/>
  </Target>


  <!--
  Generate the KSPAssembly attribute based on the Version property
  -->
  <ItemGroup>
    <GenerateKSPAssemblyAttributeDependsOn Include='GetVersionFromGit' Condition="$(GetVersionFromGit)"/>
  </ItemGroup>
  <Target Name="GenerateKSPAssemblyAttribute" BeforeTargets="CoreGenerateAssemblyInfo"
          Condition="$(GenerateKSPAssemblyAttribute)" DependsOnTargets="$(GenerateKSPAssemblyAttributeDependsOn)">
    <ItemGroup>
      <AssemblyAttribute Include="KSPAssembly">
        <_Parameter1>$(AssemblyName)</_Parameter1>
        <_Parameter1_TypeName>System.String</_Parameter1_TypeName>
        <_Parameter2>$(Version.Split('.')[0])</_Parameter2>
        <_Parameter2_TypeName>System.Int32</_Parameter2_TypeName>
        <_Parameter3>$(Version.Split('.')[1])</_Parameter3>
        <_Parameter3_TypeName>System.Int32</_Parameter3_TypeName>
        <_Parameter4>$(Version.Split('.')[2])</_Parameter4>
        <_Parameter4_TypeName>System.Int32</_Parameter4_TypeName>
      </AssemblyAttribute>
    </ItemGroup>
  </Target>

  <!--
  Generate the KSPAssemblyDependency attributes based on input references

  Reference items must have a CKANIdentifier or a KSPAssemblyName.
  KSPAssemblyVersion can be optionally specified.
    Otherwise CKANVersion is used.
    Otherwise 0.0.0 is used (no minimum version)
  -->
  <Target Name="GenerateKSPAssemblyDependencyAttributes" BeforeTargets="CoreGenerateAssemblyInfo"
          Condition="$(GenerateKSPAssemblyDependencyAttributes) == 'true'">
    <ItemGroup>
      <Reference Update="%(Reference.identity)" Condition="'%(Reference.CKANIdentifier)%(Reference.KSPAssemblyName)' != ''">
        <KSPAssemblyName Condition="%(Reference.KSPAssemblyName) == ''">$([System.String]::Copy('%(Reference.identity)').Split(',')[0])</KSPAssemblyName>
        <KSPAssemblyVersion Condition="%(Reference.KSPAssemblyVersion) == ''">%(Reference.CKANVersion)</KSPAssemblyVersion>
        <KSPAssemblyVersion Condition="%(Reference.KSPAssemblyVersion) == ''">0.0.0</KSPAssemblyVersion>
      </Reference>
    </ItemGroup>
    <ItemGroup>
      <AssemblyAttribute Include="KSPAssemblyDependency" Condition="%(Reference.KSPAssemblyName) != ''">
        <_Parameter1>%(Reference.KSPAssemblyName)</_Parameter1>
        <_Parameter1_TypeName>System.String</_Parameter1_TypeName>
        <_Parameter2>$([System.String]::Copy('%(Reference.KSPAssemblyVersion)').Split('.')[0])</_Parameter2>
        <_Parameter2_TypeName>System.Int32</_Parameter2_TypeName>
        <_Parameter3>$([System.String]::Copy('%(Reference.KSPAssemblyVersion)').Split('.')[1])</_Parameter3>
        <_Parameter3_TypeName>System.Int32</_Parameter3_TypeName>
        <_Parameter4>$([System.String]::Copy('%(Reference.KSPAssemblyVersion)').Split('.')[2])</_Parameter4>
        <_Parameter4_TypeName>System.Int32</_Parameter4_TypeName>
      </AssemblyAttribute>
    </ItemGroup>
  </Target>
</Project>
