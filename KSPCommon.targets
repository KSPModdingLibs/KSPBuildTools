<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Condition=" '$(KSPCommonPropsImported)' == '' " Project="KSPCommon.props"/>

  <!-- NuGet dependencies -->
  <ItemGroup>
    <!-- For GenerateKSPVersionFile -->
    <PackageReference Include="JsonPoke" Version="1.2.0" Condition="@(KSPVersionFile) != ''"/>
  </ItemGroup>

  <!-- Pre/post build targets -->
  <Target Name="BeforeBuildScript" BeforeTargets="Build">
  </Target>
  <Target Name="PostBuildScript" AfterTargets="Build">
    <CallTarget Targets="CopyBinariesToRepo"/>
  </Target>

  <!--Custom Targets-->

  <!-- this probably isn't the best way to do this, because it doesn't necessarily get run when switching build configs (debug/release)-->
  <!-- make sure to always do a rebuild when switching configs and you should be fine -->
  <Target Name="CopyBinariesToRepo">
    <ItemGroup>
      <BinariesToCopy Include="$(TargetDir)\*.*"/>
    </ItemGroup>
    <Copy SourceFiles="@(BinariesToCopy)" DestinationFolder="$(RepoRootPath)\$(BinariesOutputRelativePath)"/>
  </Target>

  <!-- Use CKAN to install mods for any references tagged with a CKAN Identifier -->
  <Target Name="CKANInstall" BeforeTargets="_GenerateRestoreProjectSpec;Restore">
    <ItemGroup>
      <_CKANCompatibleVersionItems Include="$(CKANCompatibleVersions.Split(' '))"/>
      <_CKANDependency Include="%(Reference.CKANIdentifier)"/>
      <_CKANDependency Include="@(CKANDependency)"/>
    </ItemGroup>

    <PropertyGroup>
      <_TempStagingFolder>$([System.IO.Path]::Combine($([System.IO.Path]::GetTempPath()), $([System.IO.Path]::GetRandomFileName())))</_TempStagingFolder>
      <_CKANCommandFile>$(_TempStagingFolder)/ckan_commands.txt</_CKANCommandFile>
      <_CKANDependencyList>@(_CKANDependency, ' ')</_CKANDependencyList>
    </PropertyGroup>

    <ItemGroup>
      <!-- Not using `ckan compat set` because as of 2024-08-16 it is still only available in the dev branch -->
      <_CKANCommands Include="compat add --gamedir &quot;$(KSPROOT)&quot; %(_CKANCompatibleVersionItems.Identity)"
                    Condition=" '$(CKANCompatibleVersions)' != '' "/>

      <_CKANCommands Include="install --no-recommends --gamedir &quot;$(KSPROOT)&quot; $(_CKANDependencyList)"/>
    </ItemGroup>

    <Message Text="Writing CKAN commands to $(_CKANCommandFile)"/>
    <Message Text="@(_CKANCommands, '%0a')" Importance="Low"/>
    <WriteLinesToFile File="$(_CKANCommandFile)" Lines="@(_CKANCommands)"/>
    <Exec Command="cat '$(_CKANCommandFile)' | ckan prompt --headless"
          Condition="'$(_CKANDependencyList)' != ''"/>
    <RemoveDir Directories="$(_TempStagingFolder)"/>
  </Target>

  <!--  For use like so: `msbuild -t:"GetRequiredExternalTools" -verbosity:minimal -nologo`, then pipe into your destination of choice -->
  <Target Name="GetRequiredExternalTools">
    <ItemGroup>
      <CKANDependencyList Include="%(Reference.CKANIdentifier)"/>
      <RequiredExternalTool Include="CKAN" Condition="@(CKANDependencyList) != ''"/>
    </ItemGroup>
    <Message Text="@(RequiredExternalTool)" Importance="high"/>
  </Target>

  <ItemDefinitionGroup>
    <KSPVersionFile>
      <Name>$(SolutionName)</Name>
      <KSP_Version>1.12</KSP_Version>
      <KSP_Version_Min>1.8</KSP_Version_Min>
      <KSP_Version_Max>1.12</KSP_Version_Max>
    </KSPVersionFile>
  </ItemDefinitionGroup>

  <!-- Target to generate the KSP version json file for AVC/CKAN etc-->
  <Target Name="GenerateKSPVersionFile" AfterTargets="Build" Inputs="@(KSPVersionFile);$(Version)" Outputs="%(KSPVersionFile.destination)">
    <ReadLinesFromFile File="@(KSPVersionFile)" Condition="Exists('@(KSPVersionFile)')">
      <Output TaskParameter="Lines" ItemName="_JSONLines"/>
    </ReadLinesFromFile>
    <PropertyGroup>
      <_JSON>@(_JSONLines, '%0a')</_JSON>
      <_JSON Condition="@(_JSONLines) == ''">{}</_JSON>
    </PropertyGroup>
    <JsonPoke Content="$(_JSON)" Query="$.NAME" RawValue="'%(KSPVersionFile.Name)'">
      <Output TaskParameter="Content" PropertyName="_JSON"/>
    </JsonPoke>
    <JsonPoke Content="$(_JSON)" Query="$.VERSION" RawValue="'%(KSPVersionFile.Version)'" Condition="%(KSPVersionFile.Version) != ''">
      <Output TaskParameter="Content" PropertyName="_JSON"/>
    </JsonPoke>
    <JsonPoke Content="$(_JSON)" Query="$.VERSION" RawValue="'$(Version)'" Condition="%(KSPVersionFile.Version) == ''">
      <Output TaskParameter="Content" PropertyName="_JSON"/>
    </JsonPoke>
    <JsonPoke Content="$(_JSON)" Query="$.URL" RawValue="'%(KSPVersionFile.URL)'" Condition="%(KSPVersionFile.URL) != ''">
      <Output TaskParameter="Content" PropertyName="_JSON"/>
    </JsonPoke>
    <JsonPoke Content="$(_JSON)" Query="$.DOWNLOAD" RawValue="'%(KSPVersionFile.Download)'" Condition="%(KSPVersionFile.Download) != ''">
      <Output TaskParameter="Content" PropertyName="_JSON"/>
    </JsonPoke>
    <JsonPoke Content="$(_JSON)" Query="$.KSP_VERSION" RawValue="'%(KSPVersionFile.KSP_Version)'" Condition="%(KSPVersionFile.KSP_Version) != ''">
      <Output TaskParameter="Content" PropertyName="_JSON"/>
    </JsonPoke>
    <JsonPoke Content="$(_JSON)" Query="$.KSP_VERSION_MIN" RawValue="'%(KSPVersionFile.KSP_Version_Min)'" Condition="%(KSPVersionFile.KSP_Version_Min) != ''">
      <Output TaskParameter="Content" PropertyName="_JSON"/>
    </JsonPoke>
    <JsonPoke Content="$(_JSON)" Query="$.KSP_VERSION_MAX" Value="'%(KSPVersionFile.KSP_Version_Max)'" Condition="%(KSPVersionFile.KSP_Version_Max) != ''">
      <Output TaskParameter="Content" PropertyName="_JSON"/>
    </JsonPoke>
    <WriteLinesToFile File="%(KSPVersionFile.Destination)" Lines="$(_JSON)" Overwrite="true"/>

    <Message Text="Writing JSON version file to %(KSPVersionFile.Destination)"/>
    <Message Text="Contents:%0a$(_JSON)" Importance="low"/>
  </Target>
</Project>