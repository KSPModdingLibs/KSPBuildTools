<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Condition=" '$(KSPCommonPropsImported)' == '' And Exists('$(MSBuildThisFileDirectory)KSPCommon.props') " Project="$(MSBuildThisFileDirectory)KSPCommon.props"/>

  <!-- Prevent the compiler from acquiring or referencing any external reference assemblies -->
  <PropertyGroup Condition=" '$(KSPBTReferenceSystemAssemblies)' == 'true' ">
    <!-- Do not download the .NET Framework Target Pack NuGet package automatically -->
    <DisableTransitiveFrameworkReferenceDownloads>true</DisableTransitiveFrameworkReferenceDownloads>
    <!-- Instruct the compiler to not automatically reference mscorlib -->
    <NoStandardLib>true</NoStandardLib>
    <!-- Prevent the GetReferenceAssemblyPaths task in Microsoft.Common.CurrentVersion.targets
         from attempting to locate an external copy of the reference assemblies. -->
    <AutomaticallyUseReferenceAssemblyPackages>false</AutomaticallyUseReferenceAssemblyPackages>
    <FrameworkPathOverride>$(KSPBTManagedPath)</FrameworkPathOverride>
    <DisableImplicitFrameworkReferences>true</DisableImplicitFrameworkReferences>
  </PropertyGroup>


  <!-- Import references -->
  <ItemGroup Condition=" '$(KSPBTReferenceSystemAssemblies)' == 'true' ">
    <Reference Include="$(KSPBTManagedPath)/System.dll">
      <Name>System (KSP/Mono)</Name>
      <Private>False</Private>
    </Reference>
    <Reference Include="$(KSPBTManagedPath)/System.Core.dll">
      <Name>System (KSP/Mono)</Name>
      <Private>False</Private>
    </Reference>
    <Reference Include="$(KSPBTManagedPath)/mscorlib.dll">
      <Name>System.Core (KSP/Mono)</Name>
      <Private>False</Private>
    </Reference>
    <Reference Include="$(KSPBTManagedPath)/System.Xml.dll">
      <Name>System.Xml (KSP/Mono)</Name>
      <Private>False</Private>
    </Reference>
  </ItemGroup>
  <ItemGroup Condition=" '$(KSPBTReferenceUnityAssemblies)' == 'true' ">
    <Reference Include="$(KSPBTManagedPath)/UnityEngine*.dll">
      <Name>UnityEngine</Name>
      <Private>False</Private>
    </Reference>
  </ItemGroup>
  <ItemGroup Condition=" '$(KSPBTReferenceGameAssemblies)' == 'true' ">
    <Reference Include="$(KSPBTManagedPath)/Assembly-CSharp.dll">
      <Name>Assembly-CSharp</Name>
      <Private>False</Private>
    </Reference>
    <Reference Include="$(KSPBTManagedPath)/Assembly-CSharp-firstpass.dll">
      <Name>Assembly-CSharp-firstpass</Name>
      <Private>False</Private>
    </Reference>
  </ItemGroup>

  <!-- NuGet dependencies -->
  <ItemGroup>
    <!-- For KSPBTGenerateVersionFile -->
    <PackageReference Include="JsonPoke" Version="1.2.0" Condition="'@(KSPVersionFile)' != ''"/>
  </ItemGroup>
  <!--Custom Targets-->
  <Target Name="KSPBTCheckForGameRoot" BeforeTargets="ResolveReferences">
    <Error Text="KSPBuildTools was unable to find a KSP installation. Please set the ReferencePath or KSPBTGameRoot property
                 in your csproj.user file to a valid KSP installation directory (the one with GameData in it)

                 See https://kspbuildtools.readthedocs.io/en/latest/msbuild/getting-started.html#locating-your-ksp-install for more information"
           Condition="'$(KSPBTGameRoot)' == ''"/>
    <ItemGroup>
      <_GameRootMessage Include="KSPBTGameRoot Candidates:"/>
      <_GameRootMessage Include="Candidate: %(KSPBTGameRootCandidate.source) from %(KSPBTGameRootCandidate.identity)"/>
      <_GameRootMessage Include="Chosen KSPBTGameRoot: $(KSPBTGameRoot) in $(KSPBTGameRootSource)" Condition="'$(KSPBTGameRoot)' != ''"/>
    </ItemGroup>
    <Message Text="@(_GameRootMessage, '%0a')" Importance="normal"/>
  </Target>

  <!-- Copy DLLs to mod GameData folder-->
  <Target Name="KSPBTCopyDLLsToPluginFolder" AfterTargets="CopyFilesToOutputDirectory"
          Condition="'$(KSPBTCopyDLLsToPluginFolder)' == 'true'">
    <ItemGroup>
      <_BinariesToCopy Include="$(TargetDir)/**/*.dll"/>
      <_BinariesToCopy Include="$(TargetDir)/**/*.pdb" Condition="'$(Condition)' == 'Debug'"/>
    </ItemGroup>
    <MakeDir Directories="$(KSPBTModRoot)/$(KSPBTModPluginFolder)"/>
    <Copy SourceFiles="@(_BinariesToCopy)" DestinationFolder="$(KSPBTModRoot)/$(KSPBTModPluginFolder)/%(RecursiveDir)"/>
  </Target>

  <!-- Use CKAN to install mods for any references tagged with a CKAN Identifier -->
  <PropertyGroup>
    <CKANCommandFile>$(BaseIntermediateOutputPath)ckancommands.cache</CKANCommandFile>
  </PropertyGroup>
  <Target Name="CKANInstallScriptGen">
    <ItemGroup>
      <_CKANCompatibleVersionItems Include="$(CKANCompatibleVersions.Split(' '))"/>
      <_CKANDependency Include="%(Reference.CKANIdentifier)" Condition="'%(Reference.CKANVersion)' == ''"/>
      <_CKANDependency Include="%(Reference.CKANIdentifier)=%(Reference.CKANVersion)" Condition="'%(Reference.CKANVersion)' != ''"/>
      <_CKANDependency Include="@(CKANDependency)"/>
    </ItemGroup>
    <PropertyGroup>
      <_CKANDependencyList>@(_CKANDependency, ' ')</_CKANDependencyList>
    </PropertyGroup>
    <ItemGroup>
      <!-- Not using `ckan compat set` because as of 2024-08-16 it is still only available in the dev branch -->
      <_CKANCommands Include="compat add --gamedir &quot;$(KSPBTGameRoot)&quot; %(_CKANCompatibleVersionItems.Identity)"
                     Condition=" '$(CKANCompatibleVersions)' != '' "/>

      <_CKANCommands Include="install --no-recommends --gamedir &quot;$(KSPBTGameRoot)&quot; $(_CKANDependencyList)" Condition="'$(CKANDependencyList)' != ''"/>
    </ItemGroup>
    <Message Text="Writing CKAN commands to $(CKANCommandFile)"/>
    <Message Text="@(_CKANCommands, '%0a')" Importance="Low"/>
    <WriteLinesToFile File="$(CKANCommandFile)" Lines="@(_CKANCommands)" Overwrite="true" WriteOnlyWhenDifferent="true"/>
  </Target>

  <ItemGroup>
    <ResolveAssemblyReferencesDependsOn Include="CKANInstall"/>
    <ResolveAssemblyReferencesDependsOn Include="KSPBTGenerateAssemblyReferences"/>
  </ItemGroup>

  <!-- Execute generated CKAN command list -->
  <Target Name="CKANInstall" DependsOnTargets="CKANInstallScriptGen" BeforeTargets="_GenerateRestoreProjectSpec;Restore;ResolveAssemblyReferences" Inputs="$(CKANCommandFile)" Outputs="$(KSPBTGameRoot)/CKAN/registry.json">
    <Exec Command="ckan prompt --headless &lt; '$(CKANCommandFile)'" Condition="'$(CKANDependencyList)' != ''"/>
  </Target>

  <Target Name="CKANClean" AfterTargets="Clean">
    <Delete Files="$(CKANCommandFile)"/>
  </Target>

  <!--
  Convert ModReference items to Reference items. This allows KSPBTInstallRoot to be evaluated
  after the csproj body or in a target, giving greater flexibility.

  The value of the item should be name of the assembly as defined in its KSPAssembly attribute.
  The DLLPath attribute is the path to the DLL relative to the installation root, e.g. "GameData/CoolMod/mod.dll"
  -->
  <Target Name="KSPBTGenerateAssemblyReferences" BeforeTargets="ResolveAssemblyReferences"
          Inputs="@(ModReference)" Outputs="@(Reference)">
    <ItemGroup>
      <Reference Include="@(ModReference->'$(KSPBTGameRoot)/%(DLLPath)')">
        <KSPAssemblyName>%(ModReference.identity)</KSPAssemblyName>
      </Reference>
    </ItemGroup>
  </Target>


  <!--  For use like so: `msbuild -t:"GetRequiredExternalTools" -verbosity:minimal -nologo`, then pipe into your destination of choice -->
  <Target Name="GetRequiredExternalTools">
    <ItemGroup>
      <CKANDependencyList Include="%(Reference.CKANIdentifier)"/>
      <RequiredExternalTool Include="CKAN" Condition="'@(CKANDependencyList)' != ''"/>
    </ItemGroup>
    <Message Text="@(RequiredExternalTool)" Importance="high"/>
  </Target>

  <!-- Generate the KSPAssembly attribute based on the FileVersion property -->
  <Target Name="KSPBTGenerateAssemblyAttribute" BeforeTargets="CoreGenerateAssemblyInfo"
          Condition="'$(KSPBTGenerateAssemblyAttribute)' == 'true'">
    <ItemGroup>
      <AssemblyAttribute Include="KSPAssembly">
        <_Parameter1>$(AssemblyName)</_Parameter1>
        <_Parameter1_TypeName>System.String</_Parameter1_TypeName>
        <_Parameter2>$(FileVersion.Split('.')[0])</_Parameter2>
        <_Parameter2_TypeName>System.Int32</_Parameter2_TypeName>
        <_Parameter3>$(FileVersion.Split('.')[1])</_Parameter3>
        <_Parameter3_TypeName>System.Int32</_Parameter3_TypeName>
        <_Parameter4 Condition="$(FileVersion.Split('.').Length) &gt; 2">$(FileVersion.Split('.')[2])</_Parameter4>
        <_Parameter4_TypeName Condition="$(FileVersion.Split('.').Length) &gt; 2">System.Int32</_Parameter4_TypeName>
      </AssemblyAttribute>
    </ItemGroup>
  </Target>

  <!--
  Generate the KSPAssemblyDependency attributes based on input references

  Reference items must have a CKANIdentifier or a KSPAssemblyName.
  KSPAssemblyVersion can be optionally specified.
    Otherwise CKANVersion is used.
    Otherwise 0.0 is used (no minimum version)
  -->
  <Target Name="KSPBTGenerateDependencyAttributes" BeforeTargets="CoreGenerateAssemblyInfo"
          Condition=" '$(KSPBTGenerateDependencyAttributes)' == 'true' ">
    <ItemGroup>
      <Reference Update="%(Reference.identity)" Condition="'%(Reference.CKANIdentifier)%(Reference.KSPAssemblyName)' != ''">
        <KSPAssemblyName Condition="'%(Reference.KSPAssemblyName)' == ''">$([System.String]::Copy('%(Reference.identity)').Split(',')[0])</KSPAssemblyName>
        <KSPAssemblyVersion Condition="'%(Reference.KSPAssemblyVersion)' == ''">%(Reference.CKANVersion)</KSPAssemblyVersion>
        <KSPAssemblyVersion Condition="'%(Reference.KSPAssemblyVersion)' == ''">0.0</KSPAssemblyVersion>
        <KSPAssemblyVersionElementCount>$([System.String]::Copy('%(Reference.KSPAssemblyVersion)').Split('.').Length)</KSPAssemblyVersionElementCount>
      </Reference>
      <ProjectReference Update="%(ProjectReference.identity)" Condition="'%(Reference.KSPAssemblyName)' != ''">
        <KSPAssemblyVersion Condition="'%(ProjectReference.KSPAssemblyVersion)' == ''">$(FileVersion)</KSPAssemblyVersion>
        <KSPAssemblyVersionElementCount>$([System.String]::Copy('%(ProjectReference.KSPAssemblyVersion)').Split('.').Length)</KSPAssemblyVersionElementCount>
      </ProjectReference>
    </ItemGroup>
    <ItemGroup>
      <AssemblyAttribute Include="KSPAssemblyDependency" Condition="'%(Reference.KSPAssemblyName)' != ''">
        <_Parameter1>%(Reference.KSPAssemblyName)</_Parameter1>
        <_Parameter1_TypeName>System.String</_Parameter1_TypeName>
        <_Parameter2>$([System.String]::Copy('%(Reference.KSPAssemblyVersion)').Split('.')[0])</_Parameter2>
        <_Parameter2_TypeName>System.Int32</_Parameter2_TypeName>
        <_Parameter3>$([System.String]::Copy('%(Reference.KSPAssemblyVersion)').Split('.')[1])</_Parameter3>
        <_Parameter3_TypeName>System.Int32</_Parameter3_TypeName>
        <_Parameter4 Condition="%(Reference.KSPAssemblyVersionElementCount) &gt; 2">$([System.String]::Copy('%(Reference.KSPAssemblyVersion)').Split('.')[2])</_Parameter4>
        <_Parameter4_TypeName Condition="%(Reference.KSPAssemblyVersionElementCount) &gt; 2">System.Int32</_Parameter4_TypeName>
      </AssemblyAttribute>
      <AssemblyAttribute Include="KSPAssemblyDependency" Condition="'%(ProjectReference.KSPAssemblyName)' != ''">
        <_Parameter1>%(ProjectReference.KSPAssemblyName)</_Parameter1>
        <_Parameter1_TypeName>System.String</_Parameter1_TypeName>
        <_Parameter2>$([System.String]::Copy('%(ProjectReference.KSPAssemblyVersion)').Split('.')[0])</_Parameter2>
        <_Parameter2_TypeName>System.Int32</_Parameter2_TypeName>
        <_Parameter3>$([System.String]::Copy('%(ProjectReference.KSPAssemblyVersion)').Split('.')[1])</_Parameter3>
        <_Parameter3_TypeName>System.Int32</_Parameter3_TypeName>
        <_Parameter4 Condition="%(ProjectReference.KSPAssemblyVersionElementCount) &gt; 2">$([System.String]::Copy('%(ProjectReference.KSPAssemblyVersion)').Split('.')[2])</_Parameter4>
        <_Parameter4_TypeName Condition="%(ProjectReference.KSPAssemblyVersionElementCount) &gt; 2">System.Int32</_Parameter4_TypeName>
      </AssemblyAttribute>
    </ItemGroup>
  </Target>

  <ItemDefinitionGroup>
    <KSPVersionFile>
      <KSP_Version>1.12</KSP_Version>
      <KSP_Version_Min>1.8</KSP_Version_Min>
      <KSP_Version_Max>1.12</KSP_Version_Max>
    </KSPVersionFile>
  </ItemDefinitionGroup>

  <!-- Target to generate the KSP version json file for AVC/CKAN etc-->
  <Target Name="KSPBTGenerateVersionFile" AfterTargets="Build"
          Inputs="@(KSPVersionFile);$(FileVersion)" Outputs="%(KSPVersionFile.destination)"
          Condition= " '$(KSPBTGenerateVersionFile)' == 'true' ">
    <ItemGroup>
      <KSPVersionFile Update="@(KSPVersionFile)">
        <Name Condition="'%(KSPVersionFile.Name)' == ''">$(ProjectName)</Name>
        <Version Condition="'%(KSPVersionFile.Version)' == ''">$(FileVersion)</Version>
      </KSPVersionFile>
    </ItemGroup>
    <ReadLinesFromFile File="%(KSPVersionFile.identity)" Condition="Exists('@(KSPVersionFile)')">
      <Output TaskParameter="Lines" ItemName="_JSONLines"/>
    </ReadLinesFromFile>
    <PropertyGroup>
      <_JSON>@(_JSONLines, '%0a')</_JSON>
      <_JSON Condition="'@(_JSONLines)' == ''">{}</_JSON>
    </PropertyGroup>
    <JsonPoke Content="$(_JSON)" Query="$.NAME" RawValue="'%(KSPVersionFile.Name)'">
      <Output TaskParameter="Content" PropertyName="_JSON"/>
    </JsonPoke>
    <JsonPoke Content="$(_JSON)" Query="$.VERSION" RawValue="'%(KSPVersionFile.Version)'">
      <Output TaskParameter="Content" PropertyName="_JSON"/>
    </JsonPoke>
    <JsonPoke Content="$(_JSON)" Query="$.URL" RawValue="'%(KSPVersionFile.URL)'" Condition="'%(KSPVersionFile.URL)' != ''">
      <Output TaskParameter="Content" PropertyName="_JSON"/>
    </JsonPoke>
    <JsonPoke Content="$(_JSON)" Query="$.DOWNLOAD" RawValue="'%(KSPVersionFile.Download)'" Condition="'%(KSPVersionFile.Download)' != ''">
      <Output TaskParameter="Content" PropertyName="_JSON"/>
    </JsonPoke>
    <JsonPoke Content="$(_JSON)" Query="$.KSP_VERSION" RawValue="'%(KSPVersionFile.KSP_Version)'" Condition="'%(KSPVersionFile.KSP_Version)' != ''">
      <Output TaskParameter="Content" PropertyName="_JSON"/>
    </JsonPoke>
    <JsonPoke Content="$(_JSON)" Query="$.KSP_VERSION_MIN" RawValue="'%(KSPVersionFile.KSP_Version_Min)'" Condition="'%(KSPVersionFile.KSP_Version_Min)' != ''">
      <Output TaskParameter="Content" PropertyName="_JSON"/>
    </JsonPoke>
    <JsonPoke Content="$(_JSON)" Query="$.KSP_VERSION_MAX" Value="'%(KSPVersionFile.KSP_Version_Max)'" Condition="'%(KSPVersionFile.KSP_Version_Max)' != ''">
      <Output TaskParameter="Content" PropertyName="_JSON"/>
    </JsonPoke>
    <WriteLinesToFile File="%(KSPVersionFile.Destination)" Lines="$(_JSON)" Overwrite="true"/>

    <Message Text="Writing JSON version file to %(KSPVersionFile.Destination)"/>
    <Message Text="Contents:%0a$(_JSON)" Importance="low"/>
  </Target>
</Project>
