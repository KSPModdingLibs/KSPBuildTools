<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Condition=" '$(KSPCommonPropsImported)' == '' And Exists('$(MSBuildThisFileDirectory)KSPCommon.props') " Project="$(MSBuildThisFileDirectory)KSPCommon.props"/>

  <!--Custom Targets-->

  <Target Name="CheckForKSPRoot" BeforeTargets="ResolveReferences">
    <Error Text="KSPBuildTools was unable to find a KSP installation. Please set the ReferencePath or KSPRoot property
                 in your csproj.user file to a valid KSP installation directory (the one with GameData in it)

                 See https://kspbuildtools.readthedocs.io/en/latest/msbuild/getting-started.html#locating-your-ksp-install for more information"
           Condition="'$(KSPRoot)' == ''"/>
    <ItemGroup>
      <_KSPRootMessage Include="KSPRoot Candidates:"/>
      <_KSPRootMessage Include="Candidate: %(KSPRootCandidate.source) from %(KSPRootCandidate.identity)"/>
      <_KSPRootMessage Include="Chosen KSPRoot: $(KSPRoot) in $(KSPRootSource)" Condition="'$(KSPRoot)' != ''"/>
    </ItemGroup>
    <Message Text="@(_KSPRootMessage, '%0a')" Importance="normal"/>

  </Target>

  <!-- Copy output files to mod folder -->
  <Target Name="CopyBinariesToRepo" AfterTargets="CopyFilesToOutputDirectory">
    <ItemGroup>
      <BinariesToCopy Include="$(TargetDir)/**"/>
    </ItemGroup>
    <MakeDir Directories="$(RepoRootPath)/$(BinariesOutputRelativePath)"/>
    <Copy SourceFiles="@(BinariesToCopy)" DestinationFolder="$(RepoRootPath)/$(BinariesOutputRelativePath)/%(RecursiveDir)"/>
  </Target>

  <!-- Use CKAN to install mods for any references tagged with a CKAN Identifier -->
  <PropertyGroup>
    <CKANCommandFile>$(BaseIntermediateOutputPath)ckancommands.cache</CKANCommandFile>
  </PropertyGroup>
  <Target Name="CKANInstallScriptGen">
    <ItemGroup>
      <_CKANCompatibleVersionItems Include="$(CKANCompatibleVersions.Split(' '))"/>
      <_CKANDependency Include="%(Reference.CKANIdentifier)" Condition="%(Reference.CKANVersion) == ''"/>
      <_CKANDependency Include="%(Reference.CKANIdentifier)=%(Reference.CKANVersion)" Condition="%(Reference.CKANVersion) != ''"/>
      <_CKANDependency Include="@(CKANDependency)"/>
    </ItemGroup>
    <PropertyGroup>
      <CKANDependencyList>@(_CKANDependency, ' ')</CKANDependencyList>
    </PropertyGroup>
    <ItemGroup>
      <!-- Not using `ckan compat set` because as of 2024-08-16 it is still only available in the dev branch -->
      <_CKANCommands Include="compat add --gamedir &quot;$(KSPROOT)&quot; %(_CKANCompatibleVersionItems.Identity)"
                     Condition=" '$(CKANCompatibleVersions)' != '' "/>

      <_CKANCommands Include="install --no-recommends --gamedir &quot;$(KSPROOT)&quot; $(CKANDependencyList)" Condition="$(CKANDependencyList) != ''"/>
    </ItemGroup>
    <Message Text="Writing CKAN commands to $(CKANCommandFile)"/>
    <Message Text="@(_CKANCommands, '%0a')" Importance="Low"/>
    <WriteLinesToFile File="$(CKANCommandFile)" Lines="@(_CKANCommands)" Overwrite="true" WriteOnlyWhenDifferent="true"/>
  </Target>

  <ItemGroup>
    <ResolveAssemblyReferencesDependsOn Include="CKANInstall"/>
  </ItemGroup>

  <!-- Execute generated CKAN command list -->
  <Target Name="CKANInstall" DependsOnTargets="CKANInstallScriptGen" BeforeTargets="_GenerateRestoreProjectSpec;Restore;ResolveAssemblyReferences" Inputs="$(CKANCommandFile)" Outputs="$(KSPRoot)/CKAN/registry.json">
    <Exec Command="ckan prompt --headless &lt; '$(CKANCommandFile)'" Condition="'$(CKANDependencyList)' != ''"/>
  </Target>

  <Target Name="CKANClean" AfterTargets="Clean">
    <Delete Files="$(CKANCommandFile)"/>
  </Target>

  <!--  For use like so: `msbuild -t:"GetRequiredExternalTools" -verbosity:minimal -nologo`, then pipe into your destination of choice -->
  <Target Name="GetRequiredExternalTools">
    <ItemGroup>
      <CKANDependencyList Include="%(Reference.CKANIdentifier)"/>
      <RequiredExternalTool Include="CKAN" Condition="@(CKANDependencyList) != ''"/>
    </ItemGroup>
    <Message Text="@(RequiredExternalTool)" Importance="high"/>
  </Target>

  <!--
  Generate the KSPAssembly attribute based on the FileVersion property
  -->
  <Target Name="GenerateKSPAssemblyAttribute" BeforeTargets="CoreGenerateAssemblyInfo"
          Condition="'$(GenerateKSPAssemblyAttribute)' == 'true'">
    <ItemGroup>
      <AssemblyAttribute Include="KSPAssembly">
        <_Parameter1>$(AssemblyName)</_Parameter1>
        <_Parameter1_TypeName>System.String</_Parameter1_TypeName>
        <_Parameter2>$(FileVersion.Split('.')[0])</_Parameter2>
        <_Parameter2_TypeName>System.Int32</_Parameter2_TypeName>
        <_Parameter3>$(FileVersion.Split('.')[1])</_Parameter3>
        <_Parameter3_TypeName>System.Int32</_Parameter3_TypeName>
        <_Parameter4>$(FileVersion.Split('.')[2])</_Parameter4>
        <_Parameter4_TypeName>System.Int32</_Parameter4_TypeName>
      </AssemblyAttribute>
    </ItemGroup>
  </Target>

  <!--
  Generate the KSPAssemblyDependency attributes based on input references

  Reference items must have a CKANIdentifier or a KSPAssemblyName.
  KSPAssemblyVersion can be optionally specified.
    Otherwise CKANVersion is used.
    Otherwise 0.0.0 is used (no minimum version)
  -->
  <Target Name="GenerateKSPAssemblyDependencyAttributes" BeforeTargets="CoreGenerateAssemblyInfo"
          Condition="'$(GenerateKSPAssemblyDependencyAttributes)' == 'true'">
    <ItemGroup>
      <Reference Update="%(Reference.identity)" Condition="'%(Reference.CKANIdentifier)%(Reference.KSPAssemblyName)' != ''">
        <KSPAssemblyName Condition="%(Reference.KSPAssemblyName) == ''">$([System.String]::Copy('%(Reference.identity)').Split(',')[0])</KSPAssemblyName>
        <KSPAssemblyVersion Condition="%(Reference.KSPAssemblyVersion) == ''">%(Reference.CKANVersion)</KSPAssemblyVersion>
        <KSPAssemblyVersion Condition="%(Reference.KSPAssemblyVersion) == ''">0.0.0</KSPAssemblyVersion>
      </Reference>
    </ItemGroup>
    <ItemGroup>
      <AssemblyAttribute Include="KSPAssemblyDependency" Condition="%(Reference.KSPAssemblyName) != ''">
        <_Parameter1>%(Reference.KSPAssemblyName)</_Parameter1>
        <_Parameter1_TypeName>System.String</_Parameter1_TypeName>
        <_Parameter2>$([System.String]::Copy('%(Reference.KSPAssemblyVersion)').Split('.')[0])</_Parameter2>
        <_Parameter2_TypeName>System.Int32</_Parameter2_TypeName>
        <_Parameter3>$([System.String]::Copy('%(Reference.KSPAssemblyVersion)').Split('.')[1])</_Parameter3>
        <_Parameter3_TypeName>System.Int32</_Parameter3_TypeName>
        <_Parameter4>$([System.String]::Copy('%(Reference.KSPAssemblyVersion)').Split('.')[2])</_Parameter4>
        <_Parameter4_TypeName>System.Int32</_Parameter4_TypeName>
      </AssemblyAttribute>
    </ItemGroup>
  </Target>

  <!-- Version file configuration -->
  <ItemDefinitionGroup>
    <KSPVersionFile>
      <Name/>
      <URL/>
      <Download/>
      <KSP_Version>1.12</KSP_Version>
      <KSP_Version_Min>1.8</KSP_Version_Min>
      <KSP_Version_Max>1.12</KSP_Version_Max>
      <Destination/>
    </KSPVersionFile>
  </ItemDefinitionGroup>

  <!-- Target to generate the KSP version json file for AVC/CKAN etc-->
  <Target Name="GenerateKSPVersionFile" AfterTargets="Build" Inputs="@(KSPVersionFile);$(FileVersion)" Outputs="%(KSPVersionFile.Destination)">
    <ItemGroup>
      <KSPVersionFile Update="@(KSPVersionFile)">
        <Name Condition="%(KSPVersionFile.Name) == ''">$(ProjectName)</Name>
        <Version Condition="%(KSPVersionFile.Version) == ''">$(FileVersion.Split(`.`)[0]).$(FileVersion.Split(`.`)[1]).$(FileVersion.Split(`.`)[2])</Version>
      </KSPVersionFile>
    </ItemGroup>

    <!-- List of JSON lines to write. MSBuild doesn't play well with spaces, an Indent property is used to handle per-line indention -->
    <ItemGroup>
      <JsonLine Include="{"/>
      <JsonLine Include="&quot;NAME&quot;: &quot;%(KSPVersionFile.Name)&quot;," Indent="  "/>
      <JsonLine Include="&quot;VERSION&quot;: &quot;%(KSPVersionFile.Version)&quot;," Indent="  "/>
      <JsonLine Include="&quot;URL&quot;: &quot;%(KSPVersionFile.URL)&quot;," Indent="  " Condition="%(KSPVersionFile.URL) != ''" />
      <JsonLine Include="&quot;DOWNLOAD&quot;: &quot;%(KSPVersionFile.Download)&quot;," Indent="  " Condition="%(KSPVersionFile.Download) != ''" />
      <JsonLine Include="&quot;KSP_VERSION&quot;: &quot;%(KSPVersionFile.KSP_Version)&quot;," Indent="  "/>
      <JsonLine Include="&quot;KSP_VERSION_MIN&quot;: &quot;%(KSPVersionFile.KSP_Version_Min)&quot;," Indent="  "/>
      <JsonLine Include="&quot;KSP_VERSION_MAX&quot;: &quot;%(KSPVersionFile.KSP_Version_Max)&quot;" Indent="  "/>
      <JsonLine Include="}"/>
    </ItemGroup>

    <!-- Indent lines by their indention property -->
    <ItemGroup>
      <JsonFinal Include="@(JsonLine)">
        <Line>$([System.String]::Concat('%(JsonLine.Indent)', '%(JsonLine.Identity)'))</Line>
      </JsonFinal>
    </ItemGroup>

    <!-- Write lines out to file -->
    <WriteLinesToFile
            File="%(KSPVersionFile.Destination)"
            Lines="@(JsonFinal->'%(Line)')"
            Overwrite="true"
            Encoding="UTF-8" />

    <Message Text="Writing KSP JSON version file to %(KSPVersionFile.Destination)"/>
  </Target>
</Project>
